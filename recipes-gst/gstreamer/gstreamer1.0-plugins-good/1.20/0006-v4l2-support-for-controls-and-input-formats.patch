From ae343b2ed0f21be69039eda0db8f4585c06d5a75 Mon Sep 17 00:00:00 2001
From: Raja Ganapathi Busam <quic_rbusam@quicinc.com>
Date: Sat, 10 Feb 2024 20:18:27 +0530
Subject: [PATCH] v4l2: Support for controls and input formats

- Add support for NV12 UBWC format
- Support for dynamically changing extra-controls
- Fix for the transcode use-case
- Add support for TP10 UBWC format
- Fix for B-Frames encoder control use-case
- Fix for extra-controls for HEVC

Signed-off-by: Raja Ganapathi Busam <quic_rbusam@quicinc.com>

---
 sys/v4l2/ext/videodev2.h     |  1 +
 sys/v4l2/gstv4l2.c           |  8 ++++
 sys/v4l2/gstv4l2allocator.c  | 28 ++++++++++--
 sys/v4l2/gstv4l2allocator.h  |  1 +
 sys/v4l2/gstv4l2bufferpool.c |  4 +-
 sys/v4l2/gstv4l2imagepool.c  |  8 ++--
 sys/v4l2/gstv4l2object.c     | 54 +++++++++++++++++++----
 sys/v4l2/gstv4l2object.h     |  3 ++
 sys/v4l2/gstv4l2videodec.c   | 83 ++++++++++++++++++++++++++++++++++--
 sys/v4l2/gstv4l2videoenc.c   | 20 +++++++--
 sys/v4l2/v4l2_calls.c        |  2 +-
 11 files changed, 186 insertions(+), 26 deletions(-)

diff --git a/sys/v4l2/ext/videodev2.h b/sys/v4l2/ext/videodev2.h
index 93a138a..d968da8 100644
--- a/sys/v4l2/ext/videodev2.h
+++ b/sys/v4l2/ext/videodev2.h
@@ -596,6 +596,7 @@ struct v4l2_pix_format {
 #define V4L2_PIX_FMT_NV24    v4l2_fourcc('N', 'V', '2', '4') /* 24  Y/CbCr 4:4:4  */
 #define V4L2_PIX_FMT_NV42    v4l2_fourcc('N', 'V', '4', '2') /* 24  Y/CrCb 4:4:4  */
 #define V4L2_PIX_FMT_QC08C   v4l2_fourcc('Q', '0', '8', 'C') /* QC08C */
+#define V4L2_PIX_FMT_QC10C   v4l2_fourcc('Q', '1', '0', 'C') /* 10-bit compressed */
 
 /* two non contiguous planes - one Y, one Cr + Cb interleaved  */
 #define V4L2_PIX_FMT_NV12M   v4l2_fourcc('N', 'M', '1', '2') /* 12  Y/CbCr 4:2:0  */
diff --git a/sys/v4l2/gstv4l2.c b/sys/v4l2/gstv4l2.c
index ec53bc9..979214f 100644
--- a/sys/v4l2/gstv4l2.c
+++ b/sys/v4l2/gstv4l2.c
@@ -113,6 +113,14 @@ gst_v4l2_probe_template_caps (const gchar * device, gint video_fd,
 
       if (alt_t)
         gst_caps_append_structure (caps, alt_t);
+
+      if (gst_structure_has_name (template, "video/x-raw")) {
+        alt_t = gst_structure_copy (template);
+        gst_caps_append_structure (caps, alt_t);
+        gst_caps_set_features (caps, gst_caps_get_size (caps) - 1,
+            gst_caps_features_new (GST_V4L2_CAPS_FEATURE_MEMORY_GBM, NULL));
+      }
+      GST_DEBUG ("caps = %" GST_PTR_FORMAT, caps);
     }
   }
 
diff --git a/sys/v4l2/gstv4l2allocator.c b/sys/v4l2/gstv4l2allocator.c
index 632c135..f9deabf 100644
--- a/sys/v4l2/gstv4l2allocator.c
+++ b/sys/v4l2/gstv4l2allocator.c
@@ -359,8 +359,11 @@ gst_v4l2_allocator_release (GstV4l2Allocator * allocator, GstV4l2Memory * mem)
 
   switch (allocator->memory) {
     case V4L2_MEMORY_DMABUF:
-      close (mem->dmafd);
-      mem->dmafd = -1;
+      if (mem->is_local_fd) {
+        GST_LOG_OBJECT (allocator, "closing fd: %d", mem->dmafd);
+        close (mem->dmafd);
+        mem->dmafd = -1;
+      }
       break;
     case V4L2_MEMORY_USERPTR:
       mem->data = NULL;
@@ -1124,6 +1127,7 @@ gst_v4l2_allocator_import_dmabuf (GstV4l2Allocator * allocator,
   GstV4l2Object *obj = allocator->obj;
   GstV4l2Memory *mem;
   gint i;
+  gboolean is_local_fd = FALSE;
 
   g_return_val_if_fail (allocator->memory == V4L2_MEMORY_DMABUF, FALSE);
 
@@ -1148,6 +1152,7 @@ gst_v4l2_allocator_import_dmabuf (GstV4l2Allocator * allocator,
 
       GST_DEBUG_OBJECT (allocator, "Memory %i is not of DMABUF", i);
 
+      // Get the driver proposed size
       maxsize = (V4L2_TYPE_IS_MULTIPLANAR (obj->type) ?
         obj->format.fmt.pix_mp.plane_fmt[i].sizeimage :
         obj->format.fmt.pix.sizeimage);
@@ -1169,12 +1174,20 @@ gst_v4l2_allocator_import_dmabuf (GstV4l2Allocator * allocator,
 
       gst_memory_map (dma_mem[i], &info, GST_MAP_READ);
 
-      memcpy (data, info.data, dma_mem[i]->size);
+      // Check if the buffer size is greater than driver proposed size
+      // if yes, copy only driver proposed size of bytes from buffer
+      // if no, copy buffer size of bytes from buffer
+      size = dma_mem[i]->size > maxsize ? maxsize : dma_mem[i]->size;
+      GST_DEBUG_OBJECT(allocator, "copying buffer size: %u", size);
+
+      memcpy (data, info.data, size);
 
       gst_memory_unmap (dma_mem[i], &info);
       if (munmap (data, maxsize))
         GST_WARNING_OBJECT (allocator, "Failed to unmap memory with error: %s",
         g_strerror (errno));
+
+      is_local_fd = TRUE;
     }
 
     GST_LOG_OBJECT (allocator, "[%i] imported DMABUF as fd %i plane %d",
@@ -1187,6 +1200,7 @@ gst_v4l2_allocator_import_dmabuf (GstV4l2Allocator * allocator,
     mem->mem.offset = offset;
     mem->mem.size = size;
     mem->dmafd = dmafd;
+    mem->is_local_fd = is_local_fd;
 
     /* Update v4l2 structure */
     group->planes[i].length = maxsize;
@@ -1327,9 +1341,12 @@ gst_v4l2_allocator_qbuf (GstV4l2Allocator * allocator,
 
   /* update sizes */
   if (V4L2_TYPE_IS_MULTIPLANAR (obj->type)) {
-    for (i = 0; i < group->n_mem; i++)
+    for (i = 0; i < group->n_mem; i++) {
       group->planes[i].bytesused =
           gst_memory_get_sizes (group->mem[i], NULL, NULL);
+      GST_LOG_OBJECT (allocator, "multiplanar data i[%d] length: %u bytesused:%u fd: %u",
+        i, group->planes[i].length, group->planes[i].bytesused, group->planes[i].m.fd);
+    }
   } else {
     group->buffer.bytesused = gst_memory_get_sizes (group->mem[0], NULL, NULL);
   }
@@ -1338,6 +1355,9 @@ gst_v4l2_allocator_qbuf (GstV4l2Allocator * allocator,
   for (i = 0; i < group->n_mem; i++)
     gst_memory_ref (group->mem[i]);
 
+  GST_LOG_OBJECT (allocator, "Queue buffer:: index:%u bytesused:%u fd: %d",
+      group->buffer.index, group->buffer.bytesused, group->buffer.m.fd);
+
   if (obj->ioctl (obj->video_fd, VIDIOC_QBUF, &group->buffer) < 0) {
     GST_ERROR_OBJECT (allocator, "failed queueing buffer %i: %s",
         group->buffer.index, g_strerror (errno));
diff --git a/sys/v4l2/gstv4l2allocator.h b/sys/v4l2/gstv4l2allocator.h
index 2166b6b..06c74b9 100644
--- a/sys/v4l2/gstv4l2allocator.h
+++ b/sys/v4l2/gstv4l2allocator.h
@@ -81,6 +81,7 @@ struct _GstV4l2Memory
   GstV4l2MemoryGroup *group;
   gpointer data;
   gint dmafd;
+  gboolean is_local_fd;
 };
 
 struct _GstV4l2MemoryGroup
diff --git a/sys/v4l2/gstv4l2bufferpool.c b/sys/v4l2/gstv4l2bufferpool.c
index 825294d..acf2360 100644
--- a/sys/v4l2/gstv4l2bufferpool.c
+++ b/sys/v4l2/gstv4l2bufferpool.c
@@ -970,7 +970,7 @@ gst_v4l2_buffer_pool_start (GstBufferPool * bpool)
   pool->size = size;
   pool->copy_threshold = copy_threshold;
   pool->max_latency = max_latency;
-  pool->min_latency = min_latency;
+  pool->min_latency = min_buffers;
   pool->num_queued = 0;
 
   if (max_buffers != 0 && max_buffers < min_buffers)
@@ -2083,7 +2083,7 @@ gst_v4l2_buffer_pool_process (GstV4l2BufferPool * pool, GstBuffer ** buf,
               GST_V4L2_IMPORT_QUARK);
 
           mem = gst_buffer_get_memory (tmp, 0);
-          gst_memory_resize (mem, 0, gst_buffer_get_memory(*buf, 0)->size);
+          gst_memory_resize (mem, 0, gst_buffer_peek_memory(*buf, 0)->size);
           gst_memory_unref (mem);
 
           vmeta = gst_buffer_get_video_meta (tmp);
diff --git a/sys/v4l2/gstv4l2imagepool.c b/sys/v4l2/gstv4l2imagepool.c
index 463f425..3718ac7 100644
--- a/sys/v4l2/gstv4l2imagepool.c
+++ b/sys/v4l2/gstv4l2imagepool.c
@@ -232,8 +232,8 @@ open_gbm_device (GstV4l2ImageBufferPool * vpool)
     return FALSE;
   }
 
-  GST_INFO_OBJECT (vpool, "Open /dev/dma_heap/system");
-  priv->devfd = open ("/dev/dma_heap/system", O_RDONLY | O_CLOEXEC);
+  GST_INFO_OBJECT (vpool, "Open /dev/dma_heap/qcom,system");
+  priv->devfd = open ("/dev/dma_heap/qcom,system", O_RDONLY | O_CLOEXEC);
 
   if (priv->devfd < 0) {
     GST_ERROR_OBJECT (vpool, "Failed to open GBM device FD!");
@@ -320,8 +320,8 @@ open_dma_device (GstV4l2ImageBufferPool * vpool)
 {
   GstV4l2ImageBufferPoolPrivate *priv = vpool->priv;
 
-  GST_INFO_OBJECT (vpool, "Open /dev/dma_heap/system");
-  priv->devfd = open ("/dev/dma_heap/system", O_RDONLY | O_CLOEXEC);
+  GST_INFO_OBJECT (vpool, "Open /dev/dma_heap/qcom,system");
+  priv->devfd = open ("/dev/dma_heap/qcom,system", O_RDONLY | O_CLOEXEC);
 
   if (priv->devfd < 0) {
     GST_ERROR_OBJECT (vpool, "Failed to open DMA device FD!");
diff --git a/sys/v4l2/gstv4l2object.c b/sys/v4l2/gstv4l2object.c
index 8402b6f..694e63d 100644
--- a/sys/v4l2/gstv4l2object.c
+++ b/sys/v4l2/gstv4l2object.c
@@ -160,6 +160,7 @@ static const GstV4L2FormatDesc gst_v4l2_formats[] = {
   {V4L2_PIX_FMT_NV61M, TRUE, GST_V4L2_RAW},
   {V4L2_PIX_FMT_NV24, TRUE, GST_V4L2_RAW},
   {V4L2_PIX_FMT_NV42, TRUE, GST_V4L2_RAW},
+  {V4L2_PIX_FMT_QC10C, TRUE, GST_V4L2_RAW},
 
   /* Bayer formats - see http://www.siliconimaging.com/RGB%20Bayer.htm */
   {V4L2_PIX_FMT_SBGGR8, TRUE, GST_V4L2_RAW},
@@ -397,7 +398,8 @@ gst_v4l2_object_install_properties_helper (GObjectClass * gobject_class,
   g_object_class_install_property (gobject_class, PROP_EXTRA_CONTROLS,
       g_param_spec_boxed ("extra-controls", "Extra Controls",
           "Extra v4l2 controls (CIDs) for the device",
-          GST_TYPE_STRUCTURE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+          GST_TYPE_STRUCTURE,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS | GST_PARAM_MUTABLE_PLAYING));
 
   /**
    * GstV4l2Src:pixel-aspect-ratio:
@@ -462,7 +464,8 @@ gst_v4l2_object_install_m2m_properties_helper (GObjectClass * gobject_class)
   g_object_class_install_property (gobject_class, PROP_EXTRA_CONTROLS,
       g_param_spec_boxed ("extra-controls", "Extra Controls",
           "Extra v4l2 controls (CIDs) for the device",
-          GST_TYPE_STRUCTURE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+          GST_TYPE_STRUCTURE,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS | GST_PARAM_MUTABLE_PLAYING));
 }
 
 /* Support for 32bit off_t, this wrapper is casting off_t to gint64 */
@@ -1372,6 +1375,9 @@ gst_v4l2_object_v4l2fourcc_to_video_format (guint32 fourcc)
     case V4L2_PIX_FMT_QC08C:
       format = GST_VIDEO_FORMAT_NV12;
       break;
+    case V4L2_PIX_FMT_QC10C:
+      format = GST_VIDEO_FORMAT_NV12_10LE32;
+      break;
     case V4L2_PIX_FMT_NV12MT:
       format = GST_VIDEO_FORMAT_NV12_64Z32;
       break;
@@ -1550,6 +1556,7 @@ gst_v4l2_object_v4l2fourcc_to_bare_struct (guint32 fourcc)
     case V4L2_PIX_FMT_NV61:    /* 16  Y/CrCb 4:2:2  */
     case V4L2_PIX_FMT_NV61M:
     case V4L2_PIX_FMT_NV24:    /* 24  Y/CrCb 4:4:4  */
+    case V4L2_PIX_FMT_QC10C:
     case V4L2_PIX_FMT_YVU410:
     case V4L2_PIX_FMT_YUV410:
     case V4L2_PIX_FMT_YUV420:  /* I420/IYUV */
@@ -1659,7 +1666,7 @@ static void
 add_alternate_variant (GstV4l2Object * v4l2object, GstCaps * caps,
     GstStructure * structure)
 {
-  GstStructure *alt_s;
+  GstStructure *alt_s, *alt_s2;
 
   if (v4l2object && v4l2object->never_interlaced)
     return;
@@ -1672,6 +1679,10 @@ add_alternate_variant (GstV4l2Object * v4l2object, GstCaps * caps,
 
   gst_caps_append_structure_full (caps, alt_s,
       gst_caps_features_new (GST_CAPS_FEATURE_FORMAT_INTERLACED, NULL));
+
+  alt_s2 = gst_structure_copy (structure);
+  gst_caps_append_structure_full (caps, alt_s2,
+      gst_caps_features_new (GST_V4L2_CAPS_FEATURE_MEMORY_GBM, NULL));
 }
 
 static GstCaps *
@@ -1838,6 +1849,9 @@ gst_v4l2_object_get_caps_info (GstV4l2Object * v4l2object, GstCaps * caps,
       case GST_VIDEO_FORMAT_NV24:
         fourcc = V4L2_PIX_FMT_NV24;
         break;
+      case GST_VIDEO_FORMAT_NV12_10LE32:
+        fourcc =  V4L2_PIX_FMT_QC10C;
+        break;
       case GST_VIDEO_FORMAT_YVYU:
         fourcc = V4L2_PIX_FMT_YVYU;
         break;
@@ -3275,7 +3289,9 @@ gst_v4l2_object_extrapolate_info (GstV4l2Object * v4l2object,
    * read/write. This workaround bugs in driver where the sizeimage provided
    * by TRY/S_FMT represent the buffer length (maximum size) rather then the expected
    * bytesused (buffer size). */
-  if (offs < info->size)
+  /* TODO: Incase of V4L2_PIX_FMT_QC10C format the minimum sizeimage set by driver
+   * doesn't match with expected size.*/
+  if ((offs < info->size) && (finfo->format != GST_VIDEO_FORMAT_NV12_10LE32))
     info->size = offs;
 }
 
@@ -3534,6 +3550,19 @@ field_to_str (enum v4l2_field f)
   return "unknown";
 }
 
+static gboolean
+caps_has_compression (const GstCaps * caps, const gchar * compression)
+{
+  GstStructure *structure = NULL;
+  const gchar *string = NULL;
+
+  structure = gst_caps_get_structure (caps, 0);
+  string = gst_structure_has_field (structure, "compression") ?
+      gst_structure_get_string (structure, "compression") : NULL;
+
+  return (g_strcmp0 (string, compression) == 0) ? TRUE : FALSE;
+}
+
 static gboolean
 gst_v4l2_object_set_format_full (GstV4l2Object * v4l2object, GstCaps * caps,
     gboolean try_only, GstV4l2Error * error)
@@ -3574,7 +3603,12 @@ gst_v4l2_object_set_format_full (GstV4l2Object * v4l2object, GstCaps * caps,
   if (!gst_v4l2_object_get_caps_info (v4l2object, caps, &fmtdesc, &info))
     goto invalid_caps;
 
-  pixelformat = fmtdesc->pixelformat;
+  if (V4L2_TYPE_IS_OUTPUT (v4l2object->type) &&
+      caps_has_compression (caps, "ubwc"))
+    pixelformat = V4L2_PIX_FMT_QC08C;
+  else
+    pixelformat = fmtdesc->pixelformat;
+
   width = GST_VIDEO_INFO_WIDTH (&info);
   height = GST_VIDEO_INFO_FIELD_HEIGHT (&info);
   fps_n = GST_VIDEO_INFO_FPS_N (&info);
@@ -5152,12 +5186,16 @@ gst_v4l2_object_decide_allocation (GstV4l2Object * obj, GstQuery * query)
   if (other_pool) {
     GstCaps *other_caps = NULL;
 
-    /*Incase if height is not aligned, configure the pool with height same as
-      what is configured in the driver otherwise the offset will be incorrect*/
-    if (obj->format.fmt.pix_mp.height != obj->info.height) {
+    /*Incase if width/height is not aligned, configure the pool with height same
+      as what is configured in the driver otherwise the offset/stride will be
+      incorrect*/
+    if (obj->format.fmt.pix_mp.width != obj->info.width ||
+        obj->format.fmt.pix_mp.height != obj->info.height) {
       GstStructure * structure = NULL;
       other_caps = gst_caps_copy (caps);
       structure = gst_caps_get_structure (other_caps, 0);
+      gst_structure_set (structure, "width", G_TYPE_INT,
+          obj->format.fmt.pix_mp.width, NULL);
       gst_structure_set (structure, "height", G_TYPE_INT,
           obj->format.fmt.pix_mp.height, NULL);
     } else {
diff --git a/sys/v4l2/gstv4l2object.h b/sys/v4l2/gstv4l2object.h
index a6edbd3..b5e11da 100644
--- a/sys/v4l2/gstv4l2object.h
+++ b/sys/v4l2/gstv4l2object.h
@@ -52,6 +52,8 @@ typedef struct _GstV4l2ObjectClassHelper GstV4l2ObjectClassHelper;
 /* max frame width/height */
 #define GST_V4L2_MAX_SIZE (1<<15) /* 2^15 == 32768 */
 
+#define GST_V4L2_CAPS_FEATURE_MEMORY_GBM "memory:GBM"
+
 G_BEGIN_DECLS
 
 #define GST_TYPE_V4L2_IO_MODE (gst_v4l2_io_mode_get_type ())
@@ -334,6 +336,7 @@ gboolean     gst_v4l2_object_set_crop (GstV4l2Object * obj, struct v4l2_rect *re
 gboolean     gst_v4l2_open           (GstV4l2Object * v4l2object, GstV4l2Error * error);
 gboolean     gst_v4l2_dup            (GstV4l2Object * v4l2object, GstV4l2Object * other);
 gboolean     gst_v4l2_close          (GstV4l2Object * v4l2object);
+gboolean     gst_v4l2_fill_lists     (GstV4l2Object * v4l2object);
 
 /* norm/input/output */
 gboolean     gst_v4l2_get_norm       (GstV4l2Object * v4l2object, v4l2_std_id * norm);
diff --git a/sys/v4l2/gstv4l2videodec.c b/sys/v4l2/gstv4l2videodec.c
index 403a0c8..fb27eac 100644
--- a/sys/v4l2/gstv4l2videodec.c
+++ b/sys/v4l2/gstv4l2videodec.c
@@ -441,10 +441,11 @@ gst_v4l2_video_dec_negotiate (GstVideoDecoder * decoder)
   GstVideoInfo info;
   GstVideoCodecState *output_state;
   GstCaps *acquired_caps, *available_caps, *caps, *filter;
-  GstStructure *st;
+  GstStructure *st, *alt_st;
   GstBufferPool *cpool;
   gboolean active;
   gboolean ret;
+  gboolean has_gbm = FALSE;
 
   /* We don't allow renegotiation without careful disabling the pool */
   cpool = gst_v4l2_object_get_buffer_pool (self->v4l2capture);
@@ -459,6 +460,35 @@ gst_v4l2_video_dec_negotiate (GstVideoDecoder * decoder)
   self->v4l2capture->info.fps_d = self->v4l2output->info.fps_d;
   self->v4l2capture->info.fps_n = self->v4l2output->info.fps_n;
 
+  /* TODO: Incase of 10-bit format, after processing the codec data, driver is
+     not setting the expected pix format on CAPTURE plane.*/
+  {
+    GstV4l2Object *v4l2object = GST_V4L2_OBJECT (self->v4l2capture);
+    GstStructure *s = gst_caps_get_structure (self->input_state->caps, 0);
+    guint bit_depth_luma = 0, bit_depth_chroma = 0;
+
+    gst_structure_get_uint (s, "bit-depth-luma", &bit_depth_luma);
+    gst_structure_get_uint (s, "bit-depth-chroma", &bit_depth_chroma);
+
+    if (bit_depth_luma == 10 && bit_depth_chroma == 10) {
+      struct v4l2_format fmt;
+      memset (&fmt, 0x00, sizeof (struct v4l2_format));
+      fmt.type = v4l2object->type;
+      if (v4l2object->ioctl (v4l2object->video_fd, VIDIOC_G_FMT, &fmt) < 0) {
+        GST_ERROR_OBJECT (self, "Call to G_FMT failed with error %s",
+            g_strerror (errno));
+        return FALSE;
+      }
+
+      fmt.fmt.pix.pixelformat = V4L2_PIX_FMT_QC10C;
+      if (v4l2object->ioctl (v4l2object->video_fd, VIDIOC_S_FMT, &fmt) < 0) {
+        GST_ERROR_OBJECT (self, "Call to S_FMT failed with error %s",
+            g_strerror (errno));
+        return FALSE;
+      }
+    }
+  }
+
   /* For decoders G_FMT returns coded size, G_SELECTION returns visible size
     * in the compose rectangle. gst_v4l2_object_acquire_format() checks both
     * and returns the visible size as with/height and the coded size as
@@ -474,8 +504,23 @@ gst_v4l2_video_dec_negotiate (GstVideoDecoder * decoder)
   acquired_caps = gst_video_info_to_caps (&info);
   GST_DEBUG_OBJECT (self, "Acquired caps: %" GST_PTR_FORMAT, acquired_caps);
   st = gst_caps_get_structure (acquired_caps, 0);
-  gst_structure_remove_fields (st, "format", "colorimetry", "chroma-site",
-      NULL);
+
+  /* GST_VIDEO_FORMAT_NV12_10LE32/V4L2_PIX_FMT_QC10C format is only available
+   * with ubwc compression and GBM memory. V4L2_PIX_FMT_QC10C pixformat is not
+   * available when the driver is probed during creation of template caps as the
+   * default encoded format set on driver is H264 and 10-bit pix format are
+   * available only on H265 encoded format. */
+  if (info.finfo->format == GST_VIDEO_FORMAT_NV12_10LE32) {
+    gst_structure_remove_fields (st, "colorimetry", "chroma-site", NULL);
+    gst_structure_set (st, "compression", G_TYPE_STRING, "ubwc", NULL);
+  } else {
+    gst_structure_remove_fields (st, "format", "colorimetry", "chroma-site",
+        NULL);
+  }
+
+  alt_st = gst_structure_copy (st);
+  gst_caps_append_structure_full (acquired_caps, alt_st,
+      gst_caps_features_new (GST_V4L2_CAPS_FEATURE_MEMORY_GBM, NULL));
 
   /* Probe currently available pixel formats */
   available_caps = gst_caps_copy (self->probed_srccaps);
@@ -501,6 +546,8 @@ gst_v4l2_video_dec_negotiate (GstVideoDecoder * decoder)
 
   /* Fixate pixel format */
   caps = gst_caps_fixate (caps);
+  has_gbm = gst_caps_features_contains (gst_caps_get_features (caps, 0),
+      GST_V4L2_CAPS_FEATURE_MEMORY_GBM);
 
   GST_DEBUG_OBJECT (self, "Chosen decoded caps: %" GST_PTR_FORMAT, caps);
 
@@ -514,9 +561,21 @@ gst_v4l2_video_dec_negotiate (GstVideoDecoder * decoder)
   output_state = gst_video_decoder_set_output_state (decoder,
       info.finfo->format, info.width, info.height, self->input_state);
 
+  output_state->caps = gst_video_info_to_caps (&info);
+
+  if (info.finfo->format == GST_VIDEO_FORMAT_NV12_10LE32) {
+    st = gst_caps_get_structure (output_state->caps, 0);
+    gst_structure_set (st, "compression", G_TYPE_STRING, "ubwc", NULL);
+  }
+
+  if (has_gbm)
+    gst_caps_set_features_simple (output_state->caps,
+        gst_caps_features_new (GST_V4L2_CAPS_FEATURE_MEMORY_GBM, NULL));
+
   /* Copy the rest of the information, there might be more in the future */
   output_state->info.interlace_mode = info.interlace_mode;
   output_state->info.colorimetry = info.colorimetry;
+
   gst_video_codec_state_unref (output_state);
 
   if (!GST_VIDEO_DECODER_CLASS (parent_class)->negotiate (decoder))
@@ -1107,6 +1166,24 @@ gst_v4l2_video_dec_sink_getcaps (GstVideoDecoder * decoder, GstCaps * filter)
   GstV4l2VideoDec *self = GST_V4L2_VIDEO_DEC (decoder);
   GstCaps *result;
 
+  /* TODO: The colorimetery expected for 10-bit format doesn't have V4L2
+     equivalent. So to avoid caps negotiation failure, we are not considering
+     set of colorimetry parameters available on the driver during negotiation.*/
+  if (filter) {
+    GstStructure *s = gst_caps_get_structure (filter, 0);
+    guint bit_depth_luma = 0, bit_depth_chroma = 0;
+
+    gst_structure_get_uint (s, "bit-depth-luma", &bit_depth_luma);
+    gst_structure_get_uint (s, "bit-depth-chroma", &bit_depth_chroma);
+
+    if (bit_depth_luma == 10 && bit_depth_chroma == 10) {
+      GstCaps *caps = gst_caps_make_writable (self->probed_sinkcaps);
+      s = gst_caps_get_structure (caps, 0);
+      gst_structure_remove_fields (s, "colorimetry", NULL);
+      self->probed_sinkcaps = caps;
+    }
+  }
+
   result = gst_video_decoder_proxy_getcaps (decoder, self->probed_sinkcaps,
       filter);
 
diff --git a/sys/v4l2/gstv4l2videoenc.c b/sys/v4l2/gstv4l2videoenc.c
index f9ba215..fc554c0 100644
--- a/sys/v4l2/gstv4l2videoenc.c
+++ b/sys/v4l2/gstv4l2videoenc.c
@@ -310,6 +310,7 @@ gst_v4l2_video_enc_set_format (GstVideoEncoder * encoder,
   GstV4l2Error error = GST_V4L2_ERROR_INIT;
   GstCaps *outcaps;
   GstVideoCodecState *output;
+  gboolean format_updated = FALSE;
 
   GST_DEBUG_OBJECT (self, "Setting format: %" GST_PTR_FORMAT, state->caps);
 
@@ -356,7 +357,13 @@ gst_v4l2_video_enc_set_format (GstVideoEncoder * encoder,
       return FALSE;
     }
 
-    format.fmt.pix.pixelformat = fmtdesc->pixelformat;
+    if (format.fmt.pix.pixelformat != fmtdesc->pixelformat) {
+      format_updated = TRUE;
+      format.fmt.pix.pixelformat = fmtdesc->pixelformat;
+    }
+
+    GST_DEBUG_OBJECT (self, "pixelformat set to %" GST_FOURCC_FORMAT,
+        GST_FOURCC_ARGS (fmtdesc->pixelformat));
     if (v4l2object->ioctl (v4l2object->video_fd, VIDIOC_S_FMT, &format) < 0) {
       GST_ERROR_OBJECT (self, "Call to S_FMT failed for %" GST_FOURCC_FORMAT
           " with error %s", GST_FOURCC_ARGS (fmtdesc->pixelformat),
@@ -367,6 +374,11 @@ gst_v4l2_video_enc_set_format (GstVideoEncoder * encoder,
     gst_caps_unref (caps);
   }
 
+  if (format_updated && !gst_v4l2_fill_lists (self->v4l2output))
+    return FALSE;
+
+  GST_DEBUG_OBJECT (self, "Setting extra controls");
+
   if (GST_V4L2_IS_OPEN (self->v4l2output) && self->v4l2output->extra_controls)
     gst_v4l2_set_controls (self->v4l2output, self->v4l2output->extra_controls);
 
@@ -587,9 +599,9 @@ gst_v4l2_video_enc_negotiate (GstVideoEncoder * encoder)
     /* negotiate_profile_and_level() will return TRUE on failure to keep
      * iterating, if gst_caps_foreach() returns TRUE it means there was no
      * compatible profile and level in any of the structure */
-    if (gst_caps_foreach (allowed_caps, negotiate_profile_and_level, &ctx)) {
-      goto no_profile_level;
-    }
+//    if (gst_caps_foreach (allowed_caps, negotiate_profile_and_level, &ctx)) {
+//      goto no_profile_level;
+//    }
 
     gst_caps_unref (allowed_caps);
     allowed_caps = NULL;
diff --git a/sys/v4l2/v4l2_calls.c b/sys/v4l2/v4l2_calls.c
index c13b142..20b2a9e 100644
--- a/sys/v4l2/v4l2_calls.c
+++ b/sys/v4l2/v4l2_calls.c
@@ -125,7 +125,7 @@ gst_v4l2_normalise_control_name (gchar * name)
  *   fill/empty the lists of enumerations
  * return value: TRUE on success, FALSE on error
  ******************************************************/
-static gboolean
+gboolean
 gst_v4l2_fill_lists (GstV4l2Object * v4l2object)
 {
   gint n, next;
